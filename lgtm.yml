##########################################################################################
# Customize file classifications.                                                        #
# Results from files under any classifier will be excluded from LGTM                     #
# statistics.                                                                            #
##########################################################################################

##########################################################################################
# Use the `path_classifiers` block to define changes to the default classification of    #
# files.                                                                                 #
##########################################################################################

path_classifiers:
  docs:
    # Identify the top-level file called `generate_javadoc.py` as documentation-related.
    - "LICENSE*"
    - "*.md"

  # The default behavior is to tag all files created during the
  # build as `generated`. Results are hidden for generated code. You can tag 
  # further files as being generated by adding them to the `generated` section.
  ci:
    - "appveyor.yml"
    - ".gitlab-ci.yml"
    - ".lgtm.yml"

#########################################################################################
# Define changes to the default code extraction process.                                #
# Each block configures the extraction of a single language, and modifies actions in a  #
# named step. Every named step includes automatic default actions,                      #
# except for the 'prepare' step. The steps are performed in the following sequence:     #
# prepare                                                                               #
# after_prepare                                                                         #
# configure (C/C++ only)                                                                #
# python_setup (Python only)                                                            #
# before_index                                                                          #
# index                                                                                 #
##########################################################################################

#########################################################################################
# Environment variables available to the steps:                                         #
#########################################################################################

# LGTM_SRC
#   The root of the source tree.
# LGTM_WORKSPACE
#   An existing (initially empty) folder outside the source tree.
#   Used for temporary download and setup commands.

#########################################################################################
# Use the extraction block to define changes to the default code extraction process     #
# for one or more languages. The settings for each language are defined in a child      #
# block, with one or more steps.                                                        #
#########################################################################################

extraction: 
  # Define settings for C# analysis
  ##################################
  csharp:
    # The `prepare` step exists for customization on LGTM.com only.
    prepare:
      - mkdir settings/lib
      - wget -P settings/lib https://github.com/cern-winagent/plugin/releases/latest/download/plugin.dll
    # Add an `after-prepare` step if you need to run commands after the `prepare` step.
    # Each command should be listed on a separate line.
    after_prepare:
      - export PATH=$LGTM_WORKSPACE/tools:$PATH
    # The `index` step builds the code and extracts information during the build
    # process.
    index:
      # Specify that all project or solution files should be used for extraction.
      # Default: false.
      all_solutions: true
      # Specify a list of one or more project or solution files for extraction.
      # Default: LGTM chooses the file closest to the root of the repository (this may
      # fail if there are multiple candidates).
      solution: 
        - settings.sln

